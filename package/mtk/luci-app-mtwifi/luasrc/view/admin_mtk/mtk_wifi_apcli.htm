
<%+header%>
<!--
	This module is a demo to configure MTK' proprietary WiFi driver.
	Basic idea is to bypass uci and edit wireless profile (mt76xx.dat) directly.
	LuCI's WiFi configuration is more logical and elegent, but it's quite tricky to
	translate uci into MTK's WiFi profile (like we did in "uci2dat").

	Hua Shao <nossiac@163.com>
	- - - - - - - - - - - - - - - - -
 
	For MT7622+MT7915
-->

<%
local disp = require "luci.dispatcher"
-- local request  = disp.context.path
local request = disp.context.request
local mtkwifi = require("mtkwifi")
--local devname = string.match(request[5], "(mt.+)%.")
local devname = request[5]
local devs = mtkwifi.get_all_devs()
local dev = {}
local vif = {}
local vifidx
for _,v in ipairs(devs) do
	if v.devname == devname then
		dev = v
	end
end

local vifname = request[6] or dev.apcli.vifname
assert(vifname)
vif = dev and dev.vifs[vifname] or nil
vifidx = vif and vif.vifidx or nil
--print(devs, dev, dev.apcli, devname, vifname)

local cfgs = mtkwifi.load_profile(dev.profile)
local debug = 0

if not mtkwifi.exists("/etc/wireless/mt7622/") then
	mt1 = ""
elseif mtkwifi.exists("/etc/wireless/mt7603/") and mtkwifi.exists("/etc/wireless/mt7612/") then
	mt1 = "mt7612"
else
	mt1 = "mt7603"
end
%>

<style type="text/css">
<% if mt1 ~= "" then %>
#container {visibility: hidden;}
<% end %>
table {
  border-collapse:separate;
  border-spacing:9px 5px
}
.he1 {
 color:red;
 margin-left:8px;
 white-space:pre;
}
@media screen and (max-device-width: 600px) {
 header .pull-right {
  flex:none;
  display:flex;
  flex-direction:column;
  justify-content:space-around;
  margin:.2em 5px .2em auto;
  padding:0
 }
 input,
 textarea,
 select,
 .cbi-dropdown > ul > li {
  font-size:1em!important;
  height:30px;
 }
}
</style>

<div id="container">
	<div id="loading" style="margin-top: 1em; display: none;">
	<img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" />
		&nbsp;&nbsp;&nbsp; Please waiting......
	</div>

	<form method="post" name="cbi" action="<%=luci.dispatcher.build_url("admin", "network", "wifi", "apcli_cfg", devname, vifname)%>" enctype="multipart/form-data" onreset="return cbi_validate_reset(this)" onsubmit="return cbi_validate_form(this, 'Some fields are invalid, cannot save values!')" autocomplete="off">

		<fieldset class="cbi-section" id="vif-cfg-apcli">
			<legend> <a class="ren" name="apcli_scan_section"><%:AP-Client%> - <%=devname.."@"..vifname%> </a></legend>
			<br />
			<% if cfgs.WirelessMode == "10" then %>
			<p class="left">
				<input disabled="disabled" id="scan" type="button" class="cbi-button cbi-button-find" onclick="get_ap_list('<%=vifname%>')" value="<%:Scan Wireless Network%>" /><span style="color:red;">&ensp; Search does not work if Mode is selected "10 - G/N mixed".</span>
			</p>
			<% else %>
			<p class="left">
				<input id="scan" type="button" class="cbi-button cbi-button-find" onclick="get_ap_list('<%=vifname%>')" value="<%:Scan Wireless Network%>" />
			</p>
			<% end %>
			<div id="loading2" style="display:none;">
			<img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" style="vertical-align:middle;" />
				&nbsp;&nbsp;&nbsp; <%:Please waiting while the page is loading......%>
			</div>
			<div id="aplist">
			</div>
		</fieldset>
		<fieldset class="cbi-section" id="vif-cfg-apcli-config">
			<legend> <a name="apcli_cfg_section"> <%:Connection Configurations%></a> </legend>
			<table class="cbi-section-table">
				<tbody>
				<tr>
					<td>Root AP SSID</td>
					<td>
						<input type="text" name="ApCliSsid" id="ApCliSsid" value="<%=cfgs.ApCliSsid%>"/>
					</td>
				</tr>
				<tr>
					<td>Root AP Channel</td>
					<td>
						<input type="text" name="Channel" id="Channel" value="<%=cfgs.Channel%>"/><span class="he1"><%:This will overwrite ap channel.%></span>
					</td>
					
				</tr>
				<tr>
					<td>Root AP Authentication Mode</td>
					<td>
						<select name="ApCliAuthMode" id="ApCliAuthMode" onchange="ApCliAuthMode_onchange(this.options[this.options.selectedIndex].value)">
						<% 
						if mt1 == "mt7612" then
							if devname == "mt7615.2" then
								dev.ApCliAuthModeList = dev.ApCliAuthModeList12
							end
						end
						%>
							<% for _,v in ipairs(dev.ApCliAuthModeList) do %>
								<% if (cfgs.ApCliAuthMode == "OPEN" and cfgs.ApCliEncrypType== "NONE") then
									if(v == "Disable") then %>
										<option value="<%=v%>" selected="selected" ><%=v%>
										</option>
									<% else %>
										<option value="<%=v%>" ><%=v%>
										</option>
									<% end
								else %>
							<option value="<%=v%>" <% if cfgs.ApCliAuthMode==v then %>selected="selected" <% end %>><%=v%>
							</option>
								<% end %>
							<% end %>
						</select>
					</td>
				</tr>
				</tbody>
				<tbody id="apcli_wpa" style="display: none;">
				<tr>
					<td>Root AP Encryption</td>
					<td>
						<select name="_wpa_ApCliEncrypType" id="_wpa_ApCliEncrypType" >
						<% for _, v in ipairs(dev.WPA_Enc_List) do %>
							<option value="<%=v%>" <% if cfgs.ApCliEncrypType==v then %>selected="selected" <% end %>><%=v%>
							</option>
						<% end %>
						</select>
					</td>
				</tr>
				</tbody>
				<tbody id="apcli_wpa3" style="display: none;">
				<tr>
					<td>Root AP Encryption</td>
					<td>
						<select name="apcli_wpa3" disabled="disabled">
							<option selected="selected">AES</option>
						</select>
					</td>
				</tr>
				</tbody>
				<tbody id="apcli_wpa_key" style="display: none;">
				<tr>
					<td>Root AP WPA Key</td>
					<td>
						<input type="text" name="ApCliWPAPSK" id="ApCliWPAPSK" value="<%=cfgs.ApCliWPAPSK%>"/>
					</td>
				</tr>
				</tbody>
				<tbody id="apcli_wep" style="display: none;">
				<tr>
					<td>Root AP Encryption</td>
					<td>
						<select name="_wep_ApCliEncrypType" id="_wep_ApCliEncrypType" >
						<% for _, v in ipairs(dev.WEP_Enc_List) do %>
							<option value="<%=v%>" <% if cfgs.ApCliEncrypType==v then %>selected="selected" <% end %>><%=v%>
							</option>
						<% end %>
						</select>
					</td>
				</tr>
				<tr>
					<td>Root AP WEP Key</td>
					<td>
						<input type="text" name="ApCliKey1Str" id="ApCliKey1Str" value="<%=cfgs.ApCliKey1Str%>"/>
						<input type="hidden" name="ApCliDefaultKeyID" value="1"/>
					</td>
				</tr>
				</tbody>
			</table>
		</fieldset>
		
		<div class="cbi-page-actions" id="apcli_form_buttons">
			<input class="cbi-button cbi-button-link" value="<%:Back%>" type="button" onclick="location.href='<%=luci.dispatcher.build_url("admin", "network", "wifi")%>'" />
			<input class="cbi-button cbi-button-positive" value="<%:Save%>" type="submit" />
			<input class="cbi-button cbi-button-apply" name="__apply" value="<%:Save & Apply%>" type="submit" onclick='save_apply()' />
			<input class="cbi-button cbi-button-reset" value="<%:Reset%>" type="reset" />
		</div>
	</form>
</div>


<script src="/luci-static/resources/jquery/jquery-1.4.js"></script>
<script type="text/javascript">
function save_apply() {
	window.scrollTo(0, 0);
	document.getElementById('loading').style.display="";
}

function decode_ssid(ssid)
{
	ssid = ssid.replace(/&amp;/g, "&");
	ssid = ssid.replace(/&lt;/g, "<");
	ssid = ssid.replace(/&gt;/g, ">");
	ssid = ssid.replace(/&#34;/g, "\"");
	ssid = ssid.replace(/&#39;/g, "'");
	ssid = ssid.replace(/&nbsp;/g, " ");
	var patt = new RegExp(/&#(\d+);/);

	while (res = patt.exec(ssid))
	{
		ssid = ssid.replace("&#" + res[1] + ";", String.fromCharCode(res[1]));
	}
	return ssid;
}

var ap_list;
function create_ap_table (aplist) {
	var table = document.createElement('table');
	table.setAttribute("id", "aplist_table");
	for (i in aplist) {
		var tr = table.insertRow(i);
		var td0 = tr.insertCell(0);
		td0.innerHTML = aplist[i].ssid;
		var td1 = tr.insertCell(1);
		td1.innerHTML = aplist[i].channel;
		var td2 = tr.insertCell(2);
		td2.innerHTML = aplist[i].bssid;
		var td3 = tr.insertCell(3);
		td3.innerHTML = aplist[i].security;
		var td4 = tr.insertCell(4);
		td4.innerHTML = aplist[i].rssi;
		var td5 = tr.insertCell(5);
		if (aplist[i].authmode == "OPEN"
		 || aplist[i].authmode == "OWE"
		 || aplist[i].authmode == "WPAPSK"
		 || aplist[i].authmode == "WPA2PSK"
		 || aplist[i].authmode == "WPA3PSK"
		 || aplist[i].authmode == "WPA2PSKWPA3PSK"
		 || aplist[i].authmode == "WPAPSKWPA2PSK") {
			td5.innerHTML = '<a href="javascript:choose_rootap(\''+i+'\')" >Choose This</a>';
		} else {
			td5.innerHTML = 'Security Not Supported';
		}
	}

	var tr = table.insertRow(0);
	var td0 = tr.insertCell(0);
	td0.innerHTML = '<strong style="margin-right:140px;">SSID</strong>';
	var td1 = tr.insertCell(1);
	td1.innerHTML = '<strong style="margin-right:10px;">Channel</strong>';
	var td2 = tr.insertCell(2);
	td2.innerHTML = '<strong style="margin-right:100px;">BSSID</strong>';
	var td3 = tr.insertCell(3);
	td3.innerHTML = '<strong style="margin-right:150px;">Security</strong>';
	var td4 = tr.insertCell(4);
	td4.innerHTML = '<strong>RSSI &emsp;</strong>';
	var td5 = tr.insertCell(5);
	td5.innerHTML = '<strong>Action</strong>';

	var div = document.getElementById('aplist');
	div.innerHTML = "";
	div.appendChild(table);
}

function get_ap_list(vifname) {

	document.getElementById("loading2").style.display="";

	XHR.get('<%=luci.dispatcher.build_url("admin", "network", "wifi", "apcli_scan")%>/' + vifname, null,
		function(x)
		{
			console.log(x)
			ap_list = eval(x.response);
			console.log(ap_list);
			create_ap_table(ap_list);
			document.getElementById("loading2").style.display="none";
		}
	);
}

function ApCliAuthMode_onchange(to) {
	if (to == "WPA2PSK" || to == "WPAPSK") {
		document.getElementById("apcli_wpa").style.display="";
		document.getElementById("apcli_wpa3").style.display="none";
		document.getElementById("apcli_wpa_key").style.display="";
		document.getElementById("apcli_wep").style.display="none";
	} else if (to == "WPA3PSK") {
		document.getElementById("apcli_wpa").style.display="none";
		document.getElementById("apcli_wpa3").style.display="";
		document.getElementById("apcli_wpa_key").style.display="";
		document.getElementById("apcli_wep").style.display="none";
	} else if (to == "OWE") {
		document.getElementById("apcli_wpa").style.display="none";
		document.getElementById("apcli_wpa3").style.display="";
		document.getElementById("apcli_wpa_key").style.display="none";
		document.getElementById("apcli_wep").style.display="none";
	} else if (to == "OPEN" || to == "SHARED") {
		document.getElementById("apcli_wpa").style.display="none";
		document.getElementById("apcli_wpa3").style.display="none";
		document.getElementById("apcli_wpa_key").style.display="none";
		document.getElementById("apcli_wep").style.display="";
	} else {
		document.getElementById("apcli_wpa").style.display="none";
		document.getElementById("apcli_wpa3").style.display="none";
		document.getElementById("apcli_wpa_key").style.display="none";
		document.getElementById("apcli_wep").style.display="none";
	}
}

function choose_rootap(index) {
	document.getElementById("ApCliSsid").value=decode_ssid(ap_list[index].ssid);
	document.getElementById("Channel").value=ap_list[index].channel;
	if (ap_list[index].authmode == "WPA3PSK" || ap_list[index].authmode == "WPA2PSKWPA3PSK") {
		document.getElementById("ApCliAuthMode").value="WPA3PSK";
	} else if (ap_list[index].authmode == "WPA2PSK" || ap_list[index].authmode == "WPAPSKWPA2PSK") {
		document.getElementById("ApCliAuthMode").value="WPA2PSK";
	} else if (ap_list[index].authmode == "OWE") {
		document.getElementById("ApCliAuthMode").value="OWE";
	} else {
	document.getElementById("ApCliAuthMode").value=ap_list[index].authmode;
	}
	if (ap_list[index].authmode == "WPA2PSK"
	 || ap_list[index].authmode == "WPAPSK"
	 || ap_list[index].authmode == "WPAPSKWPA2PSK") {
		document.getElementById("_wpa_ApCliEncrypType").value=ap_list[index].encrypttype;
	} else if (ap_list[index].authmode == "OPEN" || ap_list[index].authmode == "SHARED") {
		if (ap_list[index].encrypttype == "NONE")
		{
			document.getElementById("ApCliAuthMode").value="Disable";
		}
		else
		{
			document.getElementById("_wep_ApCliEncrypType").value=ap_list[index].encrypttype;
		}
	}
	ApCliAuthMode_onchange(document.getElementById("ApCliAuthMode").value);
	document.getElementById("ApCliWPAPSK").value="";
	document.getElementById("ApCliKey1Str").value="";
	location.href="#apcli_cfg_section";
}

<% if mt1 == "" then %>
window.onload = ApCliAuthMode_onchange(document.getElementById("ApCliAuthMode").options[document.getElementById("ApCliAuthMode").selectedIndex].value)
<% else %>
function rgi() {
	$(".ren").each(function() {
		$(this).text($(this).text().replace('mt7615.1', 'MT7622'));
		<% if mt1 == "mt7612" then %>
		$(this).text($(this).text().replace('mt7615.2', 'mt7612'));
		<% else %>
		$(this).text($(this).text().replace('mt7615.2', 'MT7915'));
		<% end %>
	});
}

window.onload = function() {
	rgi();
	ApCliAuthMode_onchange(document.getElementById("ApCliAuthMode").options[document.getElementById("ApCliAuthMode").selectedIndex].value);
	setTimeout(
		function(){
			document.getElementById("container").style.visibility = "visible";
		}, 100);
}
<% end %>
</script>

<%+footer%>
